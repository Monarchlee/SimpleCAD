#pragma kernel Recover

struct Triangle {
    float3 vertexC;
    float3 vertexB;
    float3 vertexA;
    uint3 cubeID;
};

ConsumeStructuredBuffer<Triangle> input;
AppendStructuredBuffer<Triangle> output;

int numTris;

float3 centerID;
float3 voxelRange;

[numthreads(256,1,1)]
void Recover (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= (uint)numTris) return;

    Triangle tri = input.Consume();

    float3 delta = tri.cubeID - centerID;

    if(abs(delta.x) <= voxelRange.x && abs(delta.y) <= voxelRange.y && abs(delta.z) <= voxelRange.z) return;

    output.Append(tri);
}
